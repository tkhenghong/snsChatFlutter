# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

# Own fastlane Integration Code

default_platform(:android)
platform :android do

version_number = '1.0.0'

  desc "Clean the project, Get dependencies, and Test"
  lane :build_project do
    Dir.chdir("../..") do
      sh "flutter clean"
      sh "flutter packages get"
      # sh "flutter test" # Commented out due to unable to rebuild DB file in the system. (Not yet solved)
      sh "flutter pub run flutter_launcher_icons:main -f flutter_launcher_icons-production.yaml"
    end
  end

  desc "Build App Badge Icon for Development"
  lane :build_app_badge_icon_for_development do
    add_badge(
      dark: false,
      no_badge: true,
      shield_no_resize: false,
      shield: "Development-#{version_number}-orange",
      glob: "./android/app/src/development/res/mipmap-*/ic_launcher.png",
    )
  end

  desc "Build App Badge Icon for Integration(UAT)"
  lane :build_app_badge_icon_for_integration do
    add_badge(
      dark: false,
      no_badge: true,
      shield_no_resize: false,
      shield: "UAT-#{version_number}-orange",
      glob: "./android/app/src/integration/res/mipmap-*/ic_launcher.png",
    )
  end

  desc "Build App Badge Icon for Production"
  lane :build_app_badge_icon_for_production do
    # Do nothing
  end

  desc "Build Flutter Development Release APK"
  lane :build_development_release_apk do
    build_project
    build_app_badge_icon_for_development
    Dir.chdir("../..") do
      sh "flutter build apk --target-platform android-arm,android-arm64,android-x64 --split-per-abi --flavor development --dart-define=app.flavor=development --release"
    end
  end

  desc "Build Flutter Integration Release APK"
  lane :build_integration_release_apk do
    build_project
    build_app_badge_icon_for_integration
    Dir.chdir("../..") do
      sh "flutter build apk --target-platform android-arm,android-arm64,android-x64 --split-per-abi --flavor integration  --dart-define=app.flavor=integration --release"
    end
  end

  desc "Build Flutter Production Release APK"
  lane :build_production_release_apk do
    build_project
    build_app_badge_icon_for_production
    Dir.chdir("../..") do
      sh "flutter build apk --target-platform android-arm,android-arm64,android-x64 --split-per-abi --flavor production  --dart-define=app.flavor=production --release"
    end
  end

  desc "Distribute Production Release Android app to Development Team/Tester Through Firebase App Distribution"
  lane :distribute_production_release_to_dev do
      build_development_release_apk # build the Android app. (Previous command)
      add_badge(shield: "Version-Dev-orange")
      firebase_app_distribution(
          app: "FIREBASE_APP_ID",
          firebase_cli_token: "FIREBASE_CLI_TOKEN",
          service_credentials_file: "SERVICE_CREDENTIAL_FILE_LOCATION", # You may use the same file as the file specified in Appfile.
          apk_path: "APK_FILE_PATH",
          testers_file: "TESTER_FILE_PATH",
          release_notes_file: "RELEASE_NOTES_FILE_PATH"
      )
  end

  desc "Distribute Production Release Android app to UAT Team/Testers Through Firebase App Distribution"
  lane :distribute_production_release_to_uat do
      build_integration_release_apk # build the Android app. (Previous command)
      add_badge(shield: "Version-UAT-orange")
      firebase_app_distribution(
          app: "FIREBASE_APP_ID",
          firebase_cli_token: "FIREBASE_CLI_TOKEN",
          service_credentials_file: "SERVICE_CREDENTIAL_FILE_LOCATION", # You may use the same file as the file specified in Appfile.
          apk_path: "APK_FILE_PATH",
          testers_file: "TESTER_FILE_PATH",
          release_notes_file: "RELEASE_NOTES_FILE_PATH"
      )
  end

  desc "Distribute Production Release Android app Production Team/Testers Through Firebase App Distribution"
  lane :distribute_production_release_to_prod do
      build_production_release_apk # build the Android app. (Previous command)
      firebase_app_distribution(
          app: "FIREBASE_APP_ID",
          firebase_cli_token: "FIREBASE_CLI_TOKEN",
          service_credentials_file: "SERVICE_CREDENTIAL_FILE_LOCATION", # You may use the same file as the file specified in Appfile.
          apk_path: "APK_FILE_PATH",
          testers_file: "TESTER_FILE_PATH",
          release_notes_file: "RELEASE_NOTES_FILE_PATH"
      )
  end

  desc "Submit a new Alpha Build to Microsoft AppCenter"
  lane :deploy_to_app_center do
  if File.exist?(File.dirname(__FILE__) + "./../build/app/outputs/flutter-apk/app-arm64-v8a-production-release.apk")
    appcenter_upload(
      api_token: "API_SECRET_KEY", # Your secret api token from app center
      owner_name: "USERNAME", # Your username on AppCenter
      app_name: "APP_NAME", # Your AppCenter name
      apk: "APK_FILE_LOCATION",
    )
    else
      UI.message('Unable to find apk')
    end
  end
end