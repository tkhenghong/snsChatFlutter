# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

# Own fastlane Integration Code

default_platform(:android)
platform :android do

################################################## VARIABLES ##################################################
version_number = '1.0.0'

# APK Locations
development_apk_location = './../build/app/outputs/flutter-apk/app-arm64-v8a-development-release.apk'
uat_apk_location = './../build/app/outputs/flutter-apk/app-arm64-v8a-integration-release.apk'
production_apk_location = './../build/app/outputs/flutter-apk/app-arm64-v8a-production-release.apk'

# Testers
development_testers = '../android/fastlane/testers/testers_development.txt'
uat_testers = '../android/fastlane/testers/testers_uat.txt'
production_testers = '../android/fastlane/testers/testers_production.txt'

# Release Notes
release_notes_development = '../android/fastlane/release_notes/release_notes_development.txt'
release_notes_uat = '../android/fastlane/release_notes/release_notes_uat.txt'
release_notes_production = '../android/fastlane/release_notes/release_notes_production.txt'

# Firebase App Distribution
fad_development_app_id = ''
fad_uat_app_id = ''
fad_production_app_id = ''

fad_cli_token = ''

fad_service_credentials_file_location = ''

# Microsoft AppCenter (MAC)
mac_api_token_development = ''
mac_api_token_uat = ''
mac_api_token_production = ''
mac_owner_name = 'tkhenghong'

# NOTE: App name based on the URL given in browser URL. Eg: https://appcenter.ms/users/tkhenghong/apps/PocketChat-UAT
mac_app_name_development = 'PocketChat-Development'
mac_app_name_uat = 'PocketChat-UAT'
mac_app_name_production = 'PocketChat'
################################################## END OF VARIABLES ##################################################

  desc "Clean the project, Get dependencies, and Test"
  lane :build_project do
    Dir.chdir("../..") do
      sh "flutter clean"
      sh "flutter packages get"
      # sh "flutter test" # Commented out due to unable to rebuild DB file in the system. (Not yet solved)
      sh "flutter pub run flutter_launcher_icons:main -f flutter_launcher_icons-production.yaml"
    end
  end

  desc "Build App Badge Icon for Development"
  lane :build_app_badge_icon_for_development do
    add_badge(
      dark: false,
      no_badge: true,
      shield_no_resize: false,
      shield: "Development-#{version_number}-orange",
      glob: "./android/app/src/development/res/mipmap-*/ic_launcher.png",
    )
  end

  desc "Build App Badge Icon for Integration(UAT)"
  lane :build_app_badge_icon_for_integration do
    add_badge(
      dark: false,
      no_badge: true,
      shield_no_resize: false,
      shield: "UAT-#{version_number}-orange",
      glob: "./android/app/src/integration/res/mipmap-*/ic_launcher.png",
    )
  end

  desc "Build App Badge Icon for Production"
  lane :build_app_badge_icon_for_production do
    # Do nothing
  end

  desc "Build Flutter Development Release APK"
  lane :build_development_release_apk do
    build_project
    build_app_badge_icon_for_development
    Dir.chdir("../..") do
      sh "flutter build apk --target-platform android-arm,android-arm64,android-x64 --split-per-abi --flavor development --dart-define=app.flavor=development --release"
    end
  end

  desc "Build Flutter Integration Release APK"
  lane :build_integration_release_apk do
    build_project
    build_app_badge_icon_for_integration
    Dir.chdir("../..") do
      sh "flutter build apk --target-platform android-arm,android-arm64,android-x64 --split-per-abi --flavor integration  --dart-define=app.flavor=integration --release"
    end
  end

  desc "Build Flutter Production Release APK"
  lane :build_production_release_apk do
    build_project
    build_app_badge_icon_for_production
    Dir.chdir("../..") do
      sh "flutter build apk --target-platform android-arm,android-arm64,android-x64 --split-per-abi --flavor production  --dart-define=app.flavor=production --release"
    end
  end

  desc "Distribute Production Release Android app to Development Team/Tester Through Firebase App Distribution"
  lane :distribute_production_release_to_dev do
      build_development_release_apk # build the Android app. (Previous command)
      firebase_app_distribution(
          app: fad_development_app_id,
          firebase_cli_token: fad_cli_token,
          service_credentials_file: fad_service_credentials_file_location, # You may use the same file as the file specified in Appfile.
          apk_path: development_apk_location,
          testers_file: development_testers,
          release_notes_file: release_notes_development
      )
  end

  desc "Distribute Production Release Android app to UAT Team/Testers Through Firebase App Distribution"
  lane :distribute_production_release_to_uat do
      build_integration_release_apk # build the Android app. (Previous command)
      firebase_app_distribution(
          app: fad_uat_app_id,
          firebase_cli_token: fad_cli_token,
          service_credentials_file: fad_service_credentials_file_location, # You may use the same file as the file specified in Appfile.
          apk_path: uat_apk_location,
          testers_file: uat_testers,
          release_notes_file: release_notes_uat
      )
  end

  desc "Distribute Production Release Android app Production Team/Testers Through Firebase App Distribution"
  lane :distribute_production_release_to_prod do
      build_production_release_apk # build the Android app. (Previous command)
      firebase_app_distribution(
          app: fad_production_app_id,
          firebase_cli_token: fad_cli_token,
          service_credentials_file: fad_service_credentials_file_location, # You may use the same file as the file specified in Appfile.
          apk_path: production_apk_location,
          testers_file: production_testers,
          release_notes_file: release_notes_production
      )
  end

  desc "Submit a new Development(Alpha) Release Build to Microsoft AppCenter"
  lane :deploy_to_app_center_development do
  build_development_release_apk
  if File.exist?(File.dirname(__FILE__) + development_apk_location)
    appcenter_upload(
      api_token: mac_api_token_development,
      owner_name: mac_owner_name,
      app_name: mac_app_name_development,
      apk: development_apk_location,
    )
    else
      UI.message('Unable to find apk')
    end
  end

  desc "Submit a new UAT(Beta) Release Build to Microsoft AppCenter"
  lane :deploy_to_app_center_uat do
  build_integration_release_apk
  if File.exist?(File.dirname(__FILE__) + uat_apk_location)
    appcenter_upload(
      api_token: mac_api_token_uat,
      owner_name: mac_owner_name,
      app_name: mac_app_name_uat,
      apk: uat_apk_location,
    )
    else
      UI.message('Unable to find apk')
    end
  end

  desc "Submit a new Production(Production) Release Build to Microsoft AppCenter"
  lane :deploy_to_app_center_production do
  build_production_release_apk
  if File.exist?(File.dirname(__FILE__) + production_apk_location)
    appcenter_upload(
      api_token: mac_api_token_production,
      owner_name: mac_owner_name,
      app_name: mac_app_name_production,
      apk: production_apk_location,
    )
    else
      UI.message('Unable to find apk')
    end
  end
end
